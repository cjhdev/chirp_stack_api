# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: api/tenant.proto for package 'ChirpStackAPI.API'

require 'grpc'
require 'api/tenant_pb'

module ChirpStackAPI
  module API
    module TenantService
      # TenantService is the service providing API methods for managing tenants.
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'api.TenantService'

        # Create a new tenant.
        rpc :Create, ::ChirpStackAPI::API::CreateTenantRequest, ::ChirpStackAPI::API::CreateTenantResponse
        # Get the tenant for the given ID.
        rpc :Get, ::ChirpStackAPI::API::GetTenantRequest, ::ChirpStackAPI::API::GetTenantResponse
        # Update the given tenant.
        rpc :Update, ::ChirpStackAPI::API::UpdateTenantRequest, ::Google::Protobuf::Empty
        # Delete the tenant with the given ID.
        rpc :Delete, ::ChirpStackAPI::API::DeleteTenantRequest, ::Google::Protobuf::Empty
        # Get the list of tenants.
        rpc :List, ::ChirpStackAPI::API::ListTenantsRequest, ::ChirpStackAPI::API::ListTenantsResponse
        # Add an user to the tenant.
        # Note: the user must already exist.
        rpc :AddUser, ::ChirpStackAPI::API::AddTenantUserRequest, ::Google::Protobuf::Empty
        # Get the the tenant user for the given tenant and user IDs.
        rpc :GetUser, ::ChirpStackAPI::API::GetTenantUserRequest, ::ChirpStackAPI::API::GetTenantUserResponse
        # Update the given tenant user.
        rpc :UpdateUser, ::ChirpStackAPI::API::UpdateTenantUserRequest, ::Google::Protobuf::Empty
        # Delete the given tenant user.
        rpc :DeleteUser, ::ChirpStackAPI::API::DeleteTenantUserRequest, ::Google::Protobuf::Empty
        # Get the list of tenant users.
        rpc :ListUsers, ::ChirpStackAPI::API::ListTenantUsersRequest, ::ChirpStackAPI::API::ListTenantUsersResponse
      end

      Stub = Service.rpc_stub_class
    end
  end
end
