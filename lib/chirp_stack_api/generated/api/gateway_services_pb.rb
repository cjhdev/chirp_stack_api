# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: api/gateway.proto for package 'ChirpStackAPI.API'

require 'grpc'
require 'api/gateway_pb'

module ChirpStackAPI
  module API
    module GatewayService
      # GatewayService is the service providing API methods for managing gateways.
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'api.GatewayService'

        # Create creates the given gateway.
        rpc :Create, ::ChirpStackAPI::API::CreateGatewayRequest, ::Google::Protobuf::Empty
        # Get returns the gateway for the given Gateway ID.
        rpc :Get, ::ChirpStackAPI::API::GetGatewayRequest, ::ChirpStackAPI::API::GetGatewayResponse
        # Update updates the given gateway.
        rpc :Update, ::ChirpStackAPI::API::UpdateGatewayRequest, ::Google::Protobuf::Empty
        # Delete deletes the gateway matching the given Gateway ID.
        rpc :Delete, ::ChirpStackAPI::API::DeleteGatewayRequest, ::Google::Protobuf::Empty
        # Get the list of gateways.
        rpc :List, ::ChirpStackAPI::API::ListGatewaysRequest, ::ChirpStackAPI::API::ListGatewaysResponse
        # Generate client-certificate for the gateway.
        rpc :GenerateClientCertificate, ::ChirpStackAPI::API::GenerateGatewayClientCertificateRequest, ::ChirpStackAPI::API::GenerateGatewayClientCertificateResponse
        # GetMetrics returns the gateway metrics.
        rpc :GetMetrics, ::ChirpStackAPI::API::GetGatewayMetricsRequest, ::ChirpStackAPI::API::GetGatewayMetricsResponse
      end

      Stub = Service.rpc_stub_class
    end
  end
end
