# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: api/device.proto for package 'ChirpStackAPI.API'

require 'grpc'
require 'api/device_pb'

module ChirpStackAPI
  module API
    module DeviceService
      # DeviceService is the service providing API methods for managing devices.
      class Service

        include ::GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'api.DeviceService'

        # Create the given device.
        rpc :Create, ::ChirpStackAPI::API::CreateDeviceRequest, ::Google::Protobuf::Empty
        # Get returns the device for the given DevEUI.
        rpc :Get, ::ChirpStackAPI::API::GetDeviceRequest, ::ChirpStackAPI::API::GetDeviceResponse
        # Update the given device.
        rpc :Update, ::ChirpStackAPI::API::UpdateDeviceRequest, ::Google::Protobuf::Empty
        # Delete the device with the given DevEUI.
        rpc :Delete, ::ChirpStackAPI::API::DeleteDeviceRequest, ::Google::Protobuf::Empty
        # Get the list of devices.
        rpc :List, ::ChirpStackAPI::API::ListDevicesRequest, ::ChirpStackAPI::API::ListDevicesResponse
        # Create the given device-keys.
        rpc :CreateKeys, ::ChirpStackAPI::API::CreateDeviceKeysRequest, ::Google::Protobuf::Empty
        # Get the device-keys for the given DevEUI.
        rpc :GetKeys, ::ChirpStackAPI::API::GetDeviceKeysRequest, ::ChirpStackAPI::API::GetDeviceKeysResponse
        # Update the given device-keys.
        rpc :UpdateKeys, ::ChirpStackAPI::API::UpdateDeviceKeysRequest, ::Google::Protobuf::Empty
        # Delete the device-keys for the given DevEUI.
        rpc :DeleteKeys, ::ChirpStackAPI::API::DeleteDeviceKeysRequest, ::Google::Protobuf::Empty
        # FlushDevNonces flushes the OTAA device nonces.
        rpc :FlushDevNonces, ::ChirpStackAPI::API::FlushDevNoncesRequest, ::Google::Protobuf::Empty
        # Activate (re)activates the device with the given parameters (for ABP or for
        # importing OTAA activations).
        rpc :Activate, ::ChirpStackAPI::API::ActivateDeviceRequest, ::Google::Protobuf::Empty
        # Deactivate de-activates the device.
        rpc :Deactivate, ::ChirpStackAPI::API::DeactivateDeviceRequest, ::Google::Protobuf::Empty
        # GetActivation returns the current activation details of the device (OTAA or
        # ABP).
        rpc :GetActivation, ::ChirpStackAPI::API::GetDeviceActivationRequest, ::ChirpStackAPI::API::GetDeviceActivationResponse
        # GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into
        # account.
        rpc :GetRandomDevAddr, ::ChirpStackAPI::API::GetRandomDevAddrRequest, ::ChirpStackAPI::API::GetRandomDevAddrResponse
        # GetMetrics returns the device metrics.
        # Note that this requires a device-profile with codec and measurements
        # configured.
        rpc :GetMetrics, ::ChirpStackAPI::API::GetDeviceMetricsRequest, ::ChirpStackAPI::API::GetDeviceMetricsResponse
        # GetLinkMetrics returns the device link metrics.
        # This includes uplinks, downlinks, RSSI, SNR, etc...
        rpc :GetLinkMetrics, ::ChirpStackAPI::API::GetDeviceLinkMetricsRequest, ::ChirpStackAPI::API::GetDeviceLinkMetricsResponse
        # Enqueue adds the given item to the downlink queue.
        rpc :Enqueue, ::ChirpStackAPI::API::EnqueueDeviceQueueItemRequest, ::ChirpStackAPI::API::EnqueueDeviceQueueItemResponse
        # FlushQueue flushes the downlink device-queue.
        rpc :FlushQueue, ::ChirpStackAPI::API::FlushDeviceQueueRequest, ::Google::Protobuf::Empty
        # GetQueue returns the downlink device-queue.
        rpc :GetQueue, ::ChirpStackAPI::API::GetDeviceQueueItemsRequest, ::ChirpStackAPI::API::GetDeviceQueueItemsResponse
        # GetNextFCntDown returns the next FCntDown to use for enqueing encrypted
        # downlinks. The difference with the DeviceActivation f_cont_down is that
        # this method takes potential existing queue-items into account.
        rpc :GetNextFCntDown, ::ChirpStackAPI::API::GetDeviceNextFCntDownRequest, ::ChirpStackAPI::API::GetDeviceNextFCntDownResponse
      end

      Stub = Service.rpc_stub_class
    end
  end
end
